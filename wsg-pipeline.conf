input {
	udp {
		port => 5000
		type => syslog
	}
}
filter{
	if[host] == "XXX.XXX.XXX.XXX" {
		grok {
			match => { "message" => "\A<%{INT:pid}> %{WORD:program}: %{INT:unixtime} %{INT:epoch} %{GREEDYDATA:syslog_data}"}			
		}
		if [program] == "barracuda_pqman" or [program] == "http_scan"{
			if [program] == "barracuda_pqman"{
				grok{
					match => {"syslog_data" => "\A%{IP:src_ip} %{IP:dst_ip} %{NOTSPACE:content_type} %{IP:src_ip2} %{ELB_URI:dst_url} %{INT:size} %{NOTSPACE:action1} %{NOTSPACE:action2} %{NOTSPACE:reason}  %{INT:format_version} %{INT:match_flag} %{INT:tq_flag} %{INT:action_type} %{INT:src_type} %{NOTSPACE:src_detail} %{INT:dst_type} %{NOTSPACE:dst_detail} %{INT:spy_type} %{NOTSPACE:spy_id} %{INT:infection_score} %{NOTSPACE:matched_part} %{NOTSPACE:matched_category} %{NOTSPACE:user}   %{ELB_URI:referer}"}
				}
			}
			else if [program] == "http_scan"{
				grok{
					match => {"syslog_data" => "\A%{IP:src_ip} %{IP:dst_ip} %{NOTSPACE:content_type} %{IP:src_ip2} %{ELB_URI:dst_url} %{INT:size} %{NOTSPACE:action1} %{NOTSPACE:action2} %{NOTSPACE:reason}  %{INT:format_version} %{INT:match_flag} %{INT:tq_flag} %{INT:action_type} %{INT:src_type} %{NOTSPACE:src_detail} %{INT:dst_type} %{NOTSPACE:dst_detail} %{INT:spy_type} %{NOTSPACE:spy_id} %{INT:infection_score} %{NOTSPACE:matched_part} %{NOTSPACE:matched_category} %{NOTSPACE:user}  %{ELB_URI:referer} %{NOTSPACE:referer_domain} %{NOTSPACE:referer_category} %{INT:wsa_remote_user_type}"}
				}
			}
			#
			## REMOVE DUPLICATE FIELDS
			#
			mutate {
				remove_field => [ "syslog_data" ]
				remove_field => [ "src_ip2" ]
			}
			#
			## TRANSLATE
			#
			translate {
				field => "action_type"
				destination => "action_type"
				override => true
				dictionary => [
					"0", "Allowed",
					"1", "Denied",
					"2", "Redirected",
					"3", "Rewrite-New",
					"4", "Rewrite-Existing",
					"5", "Monitored",
					"6", "Branched"
					]
			}
			translate {
				field => "src_type"
				destination => "src_type"
				override => true
				dictionary => [
					"0", "Any",
					"1", "Group",
					"2", "IP",
					"3", "Login",
					"4", "Login-Any",
					"5", "Score"
					]
			}
			translate {
				field => "dst_type"
				destination => "dst_type"
				override => true
				dictionary => [
					"0", "Any",
					"1", "Category",
					"2", "Category-Any",
					"3", "Domain",
					"4", "MIME",
					"5", "Spyware",
					"6", "URI-Patch",
					"7", "URI",
					"8", "Applications"
				]
			}
			translate {
				field => "spy_type"
				destination => "spy_type"
				override => true
				dictionary => [
					"0", "Allow",
					"1", "Block",
					"2", "Infection"
				]
			}
			#
			## ADDING EXTRA DATA
			#
			
			grok{
				match => {"dst_url" => "\A%{WORD:request_protocol}://%{HOSTNAME:request_fqdn}%{GREEDYDATA:request_path}"}
			}
			
			# Get the DNS for the client IP
			mutate { add_field => [ "src_ip_reverse", "%{src_ip}" ] }
			dns {
				reverse => [ "src_ip_reverse" ]
				action => "replace"
			}
			# Get the destination server IP/reverse
			mutate { add_field => [ "dst_ip_reverse" , "%{dst_ip}" ] }
			dns {
				reverse => [ "dst_ip_reverse" ]
				action => "replace"
			}
			# Get the destination country
			geoip {
				add_tag => [ "GeoIP" ]
				source => "dst_ip"
			}
			#
			## LEAN THE DATA
			#
			mutate {
				remove_field => [ "unixtime" ]
				remove_field => [ "proto" ]
				remove_field => [ "wsa_remote_user_type" ]
				remove_field => [ "uri,host" ]
				remove_field => [ "pid" ]
				remove_field => [ "program" ]
				remove_field => [ "epoch" ]
				remove_field => [ "path" ]
				remove_field =>	[ "urihost" ]
				remove_field =>	[ "params" ]
			}
			if "_grokparsefailure" not in [tags]{
				mutate {
					remove_field => [ "message" ]
				}
			}
		}
		else{
		
		}
	}
}
output {
	elasticsearch {
		hosts => ["ELASTICNODE"]
		index => "wsg-%{+YYYY.ww}"
	}
}